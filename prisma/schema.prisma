// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Course {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  title       String       @db.String
  description String?      @db.String
  imageUrl    String?
  price       Float?
  isPublished Boolean      @default(false)
  categoryId  String?      @db.ObjectId
  category    Category?    @relation(fields: [categoryId], references: [id])
  attachments Attachment[]
  chapters    Chapter[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  purchases   Purchase[]

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  courses Course[]
}

model Attachment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String   @db.String
  Course    Course   @relation(fields: [courseId], references: [id])
  courseId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  videoUrl    String?
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData  MuxData? @relation("chapterMux")
  course   Course   @relation(fields: [courseId], references: [id])
  courseId String   @db.ObjectId

  userProgress UserProgress[] @relation("userProgressEachChapter")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model MuxData {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  assetId    String
  playbackId String?
  chapterId  String  @unique @db.ObjectId
  chapter    Chapter @relation(name: "chapterMux", fields: [chapterId], references: [id])
}

model UserProgress {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  chapter    Chapter  @relation(name: "userProgressEachChapter", fields: [chapterId], references: [id])
  chapterId  String   @db.ObjectId
  isComplete Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, chapterId])
}

model Purchase {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  courseId  String   @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}
